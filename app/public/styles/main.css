/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

* {
  padding: 0;
  border: 0;
  box-sizing: border-box; }

body {
  font-family: 'Montserrat', sans-serif;
  width: 100%;
  height: 100%;
  background-color: #010101; }

a {
  text-decoration: none;
  color: #FFFFC0; }

a:focus {
  outline: #f35000 solid 0.5px; }

img {
  max-width: 100%;
  height: auto; }

ul {
  list-style-type: none; }

.wrapper {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 2em; }
  @media screen and (max-width: 400px) {
    .wrapper {
      padding: 0 1em; } }

header {
  background: -webkit-gradient(linear, left top, left bottom, from(#010101), to(#7A2800));
  background: linear-gradient(#010101, #7A2800);
  position: absolute;
  bottom: 0;
  width: 100%;
  min-height: 20vh;
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
  -webkit-box-pack: end;
          justify-content: flex-end; }

.navbar ul.menu {
  display: -webkit-box;
  display: flex; }

.navbar li {
  display: inline-block;
  -webkit-transition: -webkit-transform .2s ease-in-out;
  transition: -webkit-transform .2s ease-in-out;
  transition: transform .2s ease-in-out;
  transition: transform .2s ease-in-out, -webkit-transform .2s ease-in-out;
  font-size: .8rem; }

li + li {
  margin-left: 1em; }

.navbar ul.menu li:last-child {
  padding: .5em 1em 0 1em; }

.navbar ul.menu li:last-child i {
  padding: 0; }

.navbar ul a {
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
  text-align: center; }

.navbar ul a i {
  padding-bottom: 1em; }

.navbar li:hover,
.navbar li:active {
  -webkit-transform: scale(1.05);
          transform: scale(1.05); }

.navbar ul.menu__collapse {
  position: absolute;
  top: -180px;
  right: 0;
  z-index: 10;
  background: -webkit-gradient(linear, left top, left bottom, from(#7A2800), to(#010101));
  background: linear-gradient(#7A2800, #010101);
  padding: 2em;
  opacity: 0;
  -webkit-transform: scale(1, 0);
          transform: scale(1, 0);
  -webkit-transition: all ease-in .3s;
  transition: all ease-in .3s;
  -webkit-transform-origin: bottom;
          transform-origin: bottom; }

.navbar ul.menu__collapse.visible {
  opacity: .95;
  -webkit-transform: scale(1, 1);
          transform: scale(1, 1); }

ul.menu__collapse li {
  display: block;
  padding-bottom: 1em; }

ul.menu__collapse li:first-child {
  opacity: .25; }

ul.menu__collapse a {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
          flex-direction: row;
  -webkit-box-pack: end;
          justify-content: flex-end; }

ul.menu__collapse a i {
  padding-left: 1em;
  -webkit-box-ordinal-group: 2;
          order: 1; }

@media screen and (min-width: 576px) {
  header {
    position: inherit;
    background: inherit;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
            flex-direction: row;
    min-height: 50px; }
  .wrapper {
    margin-right: 0; }
  .navbar ul li {
    font-size: 1rem;
    padding: 1em 0; }
  li + li {
    margin-left: 2em; }
  .navbar ul.menu__collapse {
    top: 70px;
    right: 0;
    -webkit-transform-origin: top;
            transform-origin: top;
    background: -webkit-gradient(linear, left top, left bottom, from(#7A2800), to(#010101));
    background: linear-gradient(#7A2800, #010101); }
  .navbar ul a {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
            flex-direction: row; }
  .navbar ul a i {
    padding-right: 1em; } }

.hero__image-container {
  width: 100%;
  height: 80vh;
  text-align: center;
  padding-top: 8em; }

.hero__image-container img {
  max-height: 55vh; }

.hero__logo-container,
.hero__cta {
  position: absolute;
  left: 50%;
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%); }

.hero__logo-container {
  top: 5%; }

.hero__logo-container img {
  min-width: 200px; }

.hero__cta {
  text-align: center;
  font-size: .4rem;
  color: #FFFFC0;
  top: 22%;
  width: 95%;
  height: 15vh; }

.hero__cta h2 {
  font-size: .45rem; }

.hero__cta .btn {
  display: none; }

@media screen and (min-width: 576px) {
  .hero__image-container {
    position: absolute;
    right: 0;
    width: 50%;
    padding: 0em 2em 2em 0em; }
  .hero__image-container img {
    width: 100%;
    height: auto;
    max-height: 75vh; }
  .hero__logo-container,
  .hero__cta {
    position: absolute;
    left: 5%;
    width: 50%;
    -webkit-transform: translate(0);
            transform: translate(0); }
  .hero__logo-container {
    top: 30%; }
  .hero__cta {
    top: 50%; }
  .hero__cta h1 {
    font-size: 1.5rem; }
  .hero__cta h2 {
    font-size: .75rem; }
  .hero__cta .btn {
    display: block; } }

@media screen and (min-width: 768px) {
  .hero__logo-container {
    text-align: center; }
  .hero__logo-container img {
    min-width: initial;
    width: 85%; }
  .hero__cta h1 {
    font-size: 1.75rem; }
  .hero__cta h2,
  .hero__cta .btn {
    font-size: 1rem; } }

.btn {
  padding: 1em 2em;
  background-color: #f35000;
  font-size: .75rem;
  border-radius: .25em;
  -webkit-transition: all ease-in .3s;
  transition: all ease-in .3s; }

.btn:hover {
  background-color: #7A2800;
  -webkit-transform: scale(1.05);
          transform: scale(1.05);
  outline: none; }

.hero__cta .btn {
  width: calc(80% - 7em);
  margin: 0 auto;
  margin-top: 3em; }
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
